import React, { useState } from 'react';
import { CheckCircle2, XCircle, BarChart3, Leaf, Users, Building2, ArrowRight, ArrowLeft, Download } from 'lucide-react';
import { RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Legend, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Cell } from 'recharts';

const ESGQuestionnaire = () => {
  const [currentCategory, setCurrentCategory] = useState(0);
  const [answers, setAnswers] = useState({});
  const [showResults, setShowResults] = useState(false);

  const categories = [
    {
      name: 'Environmental',
      icon: Leaf,
      color: '#10b981',
      questions: [
        'Does your company measure and track greenhouse gas emissions?',
        'Do you have documented environmental policies and objectives?',
        'Does your company use renewable energy sources?',
        'Do you have a waste reduction and recycling program?',
        'Does your company conduct environmental impact assessments?',
        'Do you have water conservation measures in place?',
        'Does your company set science-based climate targets?',
        'Do you report environmental data publicly?',
        'Does your company have a circular economy strategy?',
        'Do you engage suppliers on environmental standards?'
      ]
    },
    {
      name: 'Social',
      icon: Users,
      color: '#3b82f6',
      questions: [
        'Does your company have a diversity and inclusion policy?',
        'Do you provide employee health and safety training?',
        'Does your company offer fair wages and benefits?',
        'Do you have anti-discrimination and harassment policies?',
        'Does your company support employee development and training?',
        'Do you measure and track employee satisfaction?',
        'Does your company engage with local communities?',
        'Do you have human rights policies for your supply chain?',
        'Does your company promote work-life balance?',
        'Do you have whistleblower protection mechanisms?'
      ]
    },
    {
      name: 'Governance',
      icon: Building2,
      color: '#8b5cf6',
      questions: [
        'Does your board have independent directors?',
        'Do you have a code of ethics and conduct?',
        'Does your company have anti-corruption policies?',
        'Do you conduct regular compliance audits?',
        'Does your board have diversity (gender, skills, background)?',
        'Do you have transparent executive compensation policies?',
        'Does your company have a data privacy policy?',
        'Do you have risk management procedures in place?',
        'Does your company publish sustainability reports?',
        'Do you have stakeholder engagement processes?'
      ]
    }
  ];

  const handleAnswer = (questionIndex, answer) => {
    const key = `${currentCategory}-${questionIndex}`;
    setAnswers(prev => ({ ...prev, [key]: answer }));
  };

  const calculateScores = () => {
    const scores = categories.map((category, catIndex) => {
      let yesCount = 0;
      category.questions.forEach((_, qIndex) => {
        const key = `${catIndex}-${qIndex}`;
        if (answers[key] === true) yesCount++;
      });
      return {
        category: category.name,
        score: (yesCount / category.questions.length) * 100,
        yesCount,
        totalQuestions: category.questions.length
      };
    });
    return scores;
  };

  const getMaturityLevel = (score) => {
    if (score >= 80) return { level: 'Advanced', color: '#10b981', description: 'Leading practices' };
    if (score >= 60) return { level: 'Intermediate', color: '#3b82f6', description: 'Good progress' };
    if (score >= 40) return { level: 'Developing', color: '#f59e0b', description: 'Building foundations' };
    return { level: 'Initial', color: '#ef4444', description: 'Early stages' };
  };

  const getCurrentCategoryAnswers = () => {
    const category = categories[currentCategory];
    return category.questions.map((_, qIndex) => {
      const key = `${currentCategory}-${qIndex}`;
      return answers[key];
    });
  };

  const isCurrentCategoryComplete = () => {
    return getCurrentCategoryAnswers().every(answer => answer !== undefined);
  };

  const nextCategory = () => {
    if (currentCategory < categories.length - 1) {
      setCurrentCategory(currentCategory + 1);
    } else {
      setShowResults(true);
    }
  };

  const prevCategory = () => {
    if (currentCategory > 0) {
      setCurrentCategory(currentCategory - 1);
    }
  };

  const resetQuestionnaire = () => {
    setAnswers({});
    setCurrentCategory(0);
    setShowResults(false);
  };

  if (showResults) {
    const scores = calculateScores();
    const overallScore = scores.reduce((sum, s) => sum + s.score, 0) / scores.length;
    const maturity = getMaturityLevel(overallScore);

    const radarData = scores.map(s => ({
      category: s.category,
      score: s.score
    }));

    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="text-center mb-8">
              <BarChart3 className="w-16 h-16 mx-auto mb-4 text-indigo-600" />
              <h1 className="text-4xl font-bold text-gray-800 mb-2">ESG Maturity Assessment Results</h1>
              <p className="text-gray-600">Company ESG Performance Overview</p>
            </div>

            <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-xl p-6 mb-8 text-center">
              <div className="text-sm text-gray-600 mb-2">Overall Maturity Score</div>
              <div className="text-5xl font-bold mb-2" style={{ color: maturity.color }}>
                {overallScore.toFixed(1)}%
              </div>
              <div className="inline-block px-4 py-2 rounded-full text-white font-semibold" style={{ backgroundColor: maturity.color }}>
                {maturity.level}
              </div>
              <div className="text-sm text-gray-600 mt-2">{maturity.description}</div>
            </div>

            <div className="grid md:grid-cols-2 gap-8 mb-8">
              <div>
                <h3 className="text-xl font-semibold mb-4 text-gray-800">Category Scores</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={scores}>
                    <XAxis dataKey="category" />
                    <YAxis domain={[0, 100]} />
                    <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />
                    <Bar dataKey="score" radius={[8, 8, 0, 0]}>
                      {scores.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={categories[index].color} />
                      ))}
                    </Bar>
                  </BarChart>
                </ResponsiveContainer>
              </div>

              <div>
                <h3 className="text-xl font-semibold mb-4 text-gray-800">Performance Radar</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <RadarChart data={radarData}>
                    <PolarGrid />
                    <PolarAngleAxis dataKey="category" />
                    <PolarRadiusAxis angle={90} domain={[0, 100]} />
                    <Radar name="ESG Score" dataKey="score" stroke="#6366f1" fill="#6366f1" fillOpacity={0.5} />
                  </RadarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="grid md:grid-cols-3 gap-4 mb-8">
              {scores.map((score, index) => {
                const category = categories[index];
                const CategoryIcon = category.icon;
                const catMaturity = getMaturityLevel(score.score);
                return (
                  <div key={index} className="border-2 rounded-xl p-6" style={{ borderColor: category.color }}>
                    <CategoryIcon className="w-10 h-10 mb-3" style={{ color: category.color }} />
                    <h4 className="font-semibold text-lg mb-2">{category.name}</h4>
                    <div className="text-3xl font-bold mb-2" style={{ color: category.color }}>
                      {score.score.toFixed(0)}%
                    </div>
                    <div className="text-sm text-gray-600 mb-2">
                      {score.yesCount} of {score.totalQuestions} criteria met
                    </div>
                    <div className="inline-block px-3 py-1 rounded-full text-xs font-semibold text-white" style={{ backgroundColor: catMaturity.color }}>
                      {catMaturity.level}
                    </div>
                  </div>
                );
              })}
            </div>

            <div className="bg-gray-50 rounded-xl p-6">
              <h3 className="text-xl font-semibold mb-4 text-gray-800">Recommendations</h3>
              <ul className="space-y-2">
                {scores.map((score, index) => {
                  if (score.score < 60) {
                    return (
                      <li key={index} className="flex items-start">
                        <div className="w-2 h-2 rounded-full mt-2 mr-3" style={{ backgroundColor: categories[index].color }}></div>
                        <span className="text-gray-700">
                          <strong>{categories[index].name}:</strong> Consider developing more comprehensive policies and practices to improve maturity in this area.
                        </span>
                      </li>
                    );
                  }
                  return null;
                })}
                {overallScore >= 60 && (
                  <li className="flex items-start">
                    <div className="w-2 h-2 rounded-full bg-green-500 mt-2 mr-3"></div>
                    <span className="text-gray-700">Strong ESG foundation. Focus on continuous improvement and leading practice adoption.</span>
                  </li>
                )}
              </ul>
            </div>

            <div className="mt-8 flex justify-center">
              <button
                onClick={resetQuestionnaire}
                className="px-8 py-3 bg-indigo-600 text-white rounded-lg font-semibold hover:bg-indigo-700 transition-colors"
              >
                Start New Assessment
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const category = categories[currentCategory];
  const CategoryIcon = category.icon;
  const categoryAnswers = getCurrentCategoryAnswers();
  const progress = ((currentCategory + 1) / categories.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
          <div className="bg-gradient-to-r from-indigo-600 to-purple-600 p-6 text-white">
            <h1 className="text-3xl font-bold mb-2">ESG Maturity Assessment</h1>
            <p className="text-indigo-100">Evaluate your company's Environmental, Social, and Governance practices</p>
            
            <div className="mt-4">
              <div className="flex justify-between text-sm mb-2">
                <span>Progress</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <div className="w-full bg-white/20 rounded-full h-2">
                <div 
                  className="bg-white rounded-full h-2 transition-all duration-500"
                  style={{ width: `${progress}%` }}
                />
              </div>
            </div>
          </div>

          <div className="p-8">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 rounded-full flex items-center justify-center" style={{ backgroundColor: `${category.color}20` }}>
                  <CategoryIcon className="w-6 h-6" style={{ color: category.color }} />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-gray-800">{category.name}</h2>
                  <p className="text-gray-600 text-sm">Category {currentCategory + 1} of {categories.length}</p>
                </div>
              </div>
              <div className="text-right">
                <div className="text-sm text-gray-600">Completed</div>
                <div className="text-2xl font-bold" style={{ color: category.color }}>
                  {categoryAnswers.filter(a => a !== undefined).length}/{category.questions.length}
                </div>
              </div>
            </div>

            <div className="space-y-4">
              {category.questions.map((question, qIndex) => {
                const key = `${currentCategory}-${qIndex}`;
                const answer = answers[key];
                return (
                  <div 
                    key={qIndex}
                    className={`border-2 rounded-lg p-4 transition-all ${
                      answer !== undefined ? 'border-gray-300 bg-gray-50' : 'border-gray-200'
                    }`}
                  >
                    <div className="flex items-start justify-between gap-4">
                      <div className="flex-1">
                        <span className="text-sm font-semibold text-gray-500">Q{qIndex + 1}</span>
                        <p className="text-gray-800 font-medium mt-1">{question}</p>
                      </div>
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleAnswer(qIndex, true)}
                          className={`px-6 py-2 rounded-lg font-semibold transition-all ${
                            answer === true
                              ? 'bg-green-500 text-white shadow-lg scale-105'
                              : 'bg-gray-100 text-gray-600 hover:bg-green-50 hover:text-green-600'
                          }`}
                        >
                          <CheckCircle2 className="w-5 h-5 inline mr-1" />
                          Yes
                        </button>
                        <button
                          onClick={() => handleAnswer(qIndex, false)}
                          className={`px-6 py-2 rounded-lg font-semibold transition-all ${
                            answer === false
                              ? 'bg-red-500 text-white shadow-lg scale-105'
                              : 'bg-gray-100 text-gray-600 hover:bg-red-50 hover:text-red-600'
                          }`}
                        >
                          <XCircle className="w-5 h-5 inline mr-1" />
                          No
                        </button>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            <div className="mt-8 flex justify-between items-center">
              <button
                onClick={prevCategory}
                disabled={currentCategory === 0}
                className={`px-6 py-3 rounded-lg font-semibold flex items-center gap-2 transition-all ${
                  currentCategory === 0
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                <ArrowLeft className="w-5 h-5" />
                Previous
              </button>

              <button
                onClick={nextCategory}
                disabled={!isCurrentCategoryComplete()}
                className={`px-6 py-3 rounded-lg font-semibold flex items-center gap-2 transition-all ${
                  !isCurrentCategoryComplete()
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : currentCategory === categories.length - 1
                    ? 'bg-green-600 text-white hover:bg-green-700 shadow-lg'
                    : 'bg-indigo-600 text-white hover:bg-indigo-700 shadow-lg'
                }`}
              >
                {currentCategory === categories.length - 1 ? 'View Results' : 'Next'}
                <ArrowRight className="w-5 h-5" />
              </button>
            </div>

            {!isCurrentCategoryComplete() && (
              <p className="text-center text-sm text-gray-500 mt-4">
                Please answer all questions to continue
              </p>
            )}
          </div>
        </div>

        <div className="mt-6 flex justify-center gap-2">
          {categories.map((cat, idx) => (
            <div
              key={idx}
              className={`w-3 h-3 rounded-full transition-all ${
                idx === currentCategory
                  ? 'w-8'
                  : ''
              }`}
              style={{
                backgroundColor: idx <= currentCategory ? cat.color : '#d1d5db'
              }}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default ESGQuestionnaire;
